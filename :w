#include "cmds.h"
#include "trie.h"
#include "util.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

const Command cmds[] = {
    {"exit", exit_handler},
    {"echo", echo_handler},
    {"type", type_handler},
};

const size_t cmds_count = sizeof(cmds) / sizeof(cmds[0]);

char **path = NULL;
int pathc = 0;

void exit_handler(int argc, char **argv) {
  if (argc > 2) {
    fprintf(stderr, "usage: exit [exit_code]\n");
    return;
  }

  int exit_code = 0;

  if (argc == 2 && (sscanf(argv[1], "%d", &exit_code) != 1 || exit_code < 0)) {
    fprintf(stderr, "exit: exit_code must be a non-negative integer\n");
    return;
  }

  exit(exit_code);
}

void echo_handler(int argc, char **argv) {
  if (argc == 1) {
    fprintf(stderr, "usage echo [string]\n");
    return;
  }

  for (int i = 1; i < argc; i++) {
    printf("%s", argv[i]);
    if (i < argc - 1) {
      printf(" ");
    }
  }
  printf("\n");
}

void init_path(void) {
  char *or_path = getenv("PATH");

  if (!or_path) {
    fprintf(stderr,
            "error: PATH environment variable is not set up properly\n");
  }

  char *token = strtok(or_path, ":");
  path = malloc(1 * sizeof(char *));
  pathc = 1;

  while (token) {
    if (pathc > 1) {
      char **new_path = realloc(path, (pathc + 1) * sizeof(char *));
      if (!new_path) {
        free_ptr_to_str(pathc, path);
        pathc = 0;
      }
      path = new_path;
    }

    path[pathc] = strdup(token);
    if (!path[pathc]) {
      free_ptr_to_str(pathc, path);
      return;
    }

    pathc++;
    token = strtok(NULL, ":");
  }
}

char *find_path_exe(int argc, char **argv) {
  if (!path) {
    return NULL;
  }
}

void type_handler(int argc, char **argv) {
  if (argc != 2) {
    fprintf(stderr, "usage type [cmd]\n");
    return;
  }

  TrieNode *node = find_in_trie(argv[1]);

  if (!node) {
    char *path = NULL;
    if (!(path = find_path_exe(argc, argv))) {
      fprintf(stderr, "%s: not found\n", argv[1]);
    } else {
      printf("%s is %s\n", argv[0], path);
    }
    return;
  }

  printf("%s is a shell builtin\n", argv[1]);
}
